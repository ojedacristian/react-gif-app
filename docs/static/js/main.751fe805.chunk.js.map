{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","onChange","target","value","className","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","gif","id","title","images","downsized","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","console","log","img","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAa9C,OACI,0BAAMC,SARW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,OAKd,2BAAOO,KAAK,OAAOC,SAZP,SAACN,GACjBF,EAAcE,EAAEO,OAAOC,QAWyBA,MAAQX,EAAaY,UAAU,Y,uBClB1EC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAG,YAAK,CAACC,GAAGD,EAAIC,GAAIC,MAAMF,EAAIE,MAAOV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,UAAUZ,QAJlE,kBAKZM,GALY,4CAAH,sDCEPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAOV,EAAQ,EAARA,IAEhC,OACI,wBAAIJ,UAAU,mDACV,yBAAKkB,IAAKd,EAAKe,IAAKL,IACpB,2BAAIA,KCHHM,EAAU,SAAC,GAAiB,IAAflB,EAAc,EAAdA,SAAc,ECDZ,SAAEA,GAAe,IAAD,EAEdf,mBAAS,CAC/BsB,KAAK,GACLY,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAkBxC,OAXAC,qBAAU,WAEFvB,EAAQC,GACPuB,MAAM,SAAAf,GAAI,OAAIa,EAAS,CACpBd,KAAMC,EACNW,SAAQ,SAElB,CAAEnB,IAIGoB,EDbwBI,CAAaxB,GAAhCa,EAJwB,EAI7BN,KAAaY,EAJgB,EAIhBA,QAGpB,OAFAM,QAAQC,IAAIb,GAGR,oCACI,gCAAOb,GACX,yBAAKF,UAAU,QAETqB,GAAW,0CAETN,EAAOJ,KAAK,SAAAkB,GAAG,OACH,kBAAC,EAAD,eACAC,IAAOD,EAAIhB,IACPgB,UEjBnBE,EAAe,WAAO,IAAD,EAEM5C,mBAAS,CAAC,kBAFhB,mBAEvBQ,EAFuB,KAEXT,EAFW,KAI9B,OACI,oCACI,8CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEQS,EAAWgB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACA4B,IAAM5B,EACNA,SAAWA,UCbnC8B,IAASC,OAAO,kBAAC,EAAD,MAAiBC,SAASC,eAAe,U","file":"static/js/main.751fe805.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('')\n    \n    const handleInput = (e) =>{\n        setInputValue(e.target.value)\n    }\n    const handleSubmit = (e) =>{\n        e.preventDefault()\n        if(inputValue.trim().length > 2){\n            setCategories( categories => [inputValue, ...categories]);\n            setInputValue('');\n        }\n    }\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input type='text' onChange={ handleInput } value={ inputValue } className='input'></input>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async(category) =>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=IPnKFuoUwd6HNQdy8rGdIcyPX4Vcj6hO`\n    const resp = await fetch(url)\n    const { data } = await resp.json()\n    const gifs = data.map(gif => ({id:gif.id, title:gif.title, url:gif.images?.downsized.url}))\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({title, url}) =>{\n    \n    return (\n        <li className='grid-item animate__animated animate__backInLeft'> \n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </li>\n    )\n}","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) =>{\n\n\n\n    const {data:images, loading} = useFetchGifs(category);\n    console.log(images)\n\n    return(\n        <>\n            <h4> { category }</h4>\n        <div className='grid'>\n            \n            { loading && <p>Cargando...</p> }\n            {\n                images.map( img => (\n                            <GifGridItem \n                            key = {img.id}\n                            {...img}\n                            />\n                )) \n                    \n            }\n        </div>\n        </>\n    )\n}","import { useState, useEffect } from \"react\"\nimport {getGifs} from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    })\n\n    useEffect(()=>{\n\n            getGifs(category)\n            .then( gifs => setState({\n                data: gifs,\n                loading:false\n            }))\n    },[ category ]);\n\n\n\n    return state\n}","import React, { useState } from 'react';\nimport { AddCategory } from './AddCategory';\nimport { GifGrid } from './GifGrid';\n\nexport const GifExpertApp = () => { \n\n    const [categories, setCategories] = useState(['Dragon Ball Z'])\n    \n    return(\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories={ setCategories} />\n            <hr/>\n\n            <ol>\n                { \n                    categories.map( category =>  (\n                        <GifGrid \n                        key={ category }\n                        category={ category }\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './components/GifExpertApp';\n\n\nReactDOM.render(<GifExpertApp />,document.getElementById('root'));\n"],"sourceRoot":""}